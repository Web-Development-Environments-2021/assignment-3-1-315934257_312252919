---
openapi: 3.0.0
info:
  title: League Management API
  description: An API that allows users to obtain existing information of teams and players or post info of games/teams etc
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/JonatanMilver/LeagueManagementAPI/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /user:
    post:
      tags:
      - User
      summary: A new user from the client is added to the server.
      description: A JSON objects contains all the details about the new user.
      requestBody:
        description: User object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: Wrong input parameters
  /user/login:
    post:
      tags:
      - User
      summary: Logs user into the system
      description: Checks whether a user exists with the given inputs and returns the user object if successful. else, returns an error message.
      requestBody:
        content:
          text/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: username or password are wrong
  /user/{username}/favorites/team:
    get:
      tags:
      - User
      summary: Returns the favorite teams of the user.
      description: Returns all json objects of the favorite teams of the user.
      parameters:
      - name: username
        in: path
        description: The username that his favorite teams would be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: the operation successful - relevant JSON object of teams(each is JSON as well) is fetched
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Specific team was not found
    post:
      tags:
      - User
      summary: User add a team to his favorites
      description: a team_name data is added to the user as a favorite team
      parameters:
      - name: username
        in: path
        description: The username that adding the favorite team.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Team name to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      responses:
        "201":
          description: A team has been added to favorites
        "400":
          description: Wrong input parameters
  /user/{username}/favorites/player:
    get:
      tags:
      - User
      summary: Returns the favorite players of the user.
      description: Returns all json objects of the favorite players of the user.
      parameters:
      - name: username
        in: path
        description: The username that his favorite players would be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: the operation successful - relevant JSON object of players(each is JSON as well) is fetched.
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Specific player was not found
    post:
      tags:
      - User
      summary: User add a player to his favorites
      description: a player_id data is added to the user as a favorite player
      parameters:
      - name: username
        in: path
        description: The username that adding the favorite player.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: player id to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
        required: true
      responses:
        "201":
          description: A player has been added to favorites.
        "400":
          description: Wrong input parameters
  /user/{username}/favorites/game:
    get:
      tags:
      - User
      summary: Returns the favorite games of the user.
      description: Returns all json objects of the favorite games of the user.
      parameters:
      - name: username
        in: path
        description: The username that his favorite games would be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: the operation successful - relevant JSON object of games(each is JSON as well) is fetched.
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Specific game was not found
    post:
      tags:
      - User
      summary: User add a game to his favorites
      description: a game_id data is added to the user as a favorite game
      parameters:
      - name: username
        in: path
        description: The username that adding the favorite game.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: game id to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        "201":
          description: A game has been added to favorites.
        "400":
          description: Wrong input parameters
  /league/{league_id}:
    get:
      tags:
      - League
      summary: Returns league details.
      description: Returns all details of the league as specified in the league schema.
      parameters:
      - name: league_id
        in: path
        description: The id of our league.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: the operation successful - league JSON object is fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/League'
        "400":
          description: Invalid league supplied
        "404":
          description: League not found
  /team/{team_name}:
    get:
      tags:
      - Team
      summary: Returns a team with given name
      description: Checks whether a team exists with the given name and returns the team object if successful. else, returns an error message.
      parameters:
      - name: team_name
        in: path
        description: The name that needs to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: the operation successful - relevant team JSON object is fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        "400":
          description: Invalid team supplied
        "404":
          description: Team not found
  /player/{player_name}:
    get:
      tags:
      - Player
      summary: Returns a player with given name
      description: Checks whether a player exists with the given name and returns the player object if successful. else, returns an error message.
      parameters:
      - name: player_name
        in: path
        description: The name that needs to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: the operation successful - relevant player JSON object is fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        "400":
          description: Invalid player supplied
        "404":
          description: Player not found
  /coach/{coach_name}:
    get:
      tags:
      - Coach
      summary: Returns a coach with given name
      description: Checks whether a coach exists with the given name and returns the coach object if successful. else, returns an error message.
      parameters:
      - name: coach_name
        in: path
        description: The name that needs to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: the operation successful - relevant coach JSON object is fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coach'
        "400":
          description: Invalid coach supplied
        "404":
          description: Coach not found
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
        first_name:
          type: string
          description: user's first name
        last_name:
          type: string
          description: user's last name
        country:
          type: object
          description: user's country
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            password contains between 5 to 10 chats, at least one of them is a number and a special char
          format: password
        email:
          type: string
          description: user's email
          format: email
        image-url:
          type: string
          description: URL for the user's image
          format: URL
        favorites:
          type: object
          description: Holds all the favorite Teams, Players and Games.
      description: Model containing user info
    Player:
      type: object
      properties:
        name:
          type: string
        team:
          $ref: '#/components/schemas/Team'
        picture:
          type: string
        positionNumber:
          type: integer
    Coach:
      type: object
      properties:
        name:
          type: string
        team:
          $ref: '#/components/schemas/Team'
        picture:
          type: string
    Team:
      type: object
      properties:
        name:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        coach:
          $ref: '#/components/schemas/Coach'
    Game:
      type: object
      properties:
        gameId:
          type: integer
        time:
          type: string
          format: date-time
        homeTeam:
          $ref: '#/components/schemas/Team'
        awayTeam:
          $ref: '#/components/schemas/Team'
        stadium:
          type: string
        result:
          type: string
        eventLog:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Event:
      type: object
      properties:
        time:
          type: string
          format: date-time
        gameTime:
          type: integer
        event:
          type: string
        eventType:
          type: string
          enum:
          - Goal
          - Offside
          - Foul
          - Red Card
          - Yellow Card
          - Injury
          - Player Switch
    League:
      type: object
      properties:
        name:
          type: string
        current_season:
          type: string
        current_stage:
          type: string
        next_game:
          $ref: '#/components/schemas/Game'
    body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
